
################
#              #
# HTML BACKEND #
#              #
################


### UTILITY: PRINT BEGIN TAG OF FONT STYLE BLOCK ###
proc font_style_begin {} {
	global curr_section_type
	global config_html_p_colored text_color
	if {!$config_html_p_colored} {
		return ""
	}
	return "<font color=\"$text_color($curr_section_type)\">"
}

### UTILITY PRINT END TAG OF FONT STYLE BLOCK ###
proc font_style_end {} {
	global config_html_p_colored
	if {!$config_html_p_colored} {
		return ""
	}
	return "</font>"
}

### UTILITY: PRINT BEGIN TAG OF PARAGRAPH BLOCK ###
proc p_style_begin {} {
	global config_html_p_justify
	set p_tag "<p"
	if {$config_html_p_justify == 1} {
		append p_tag " align=\"justify\""
	}
	append p_tag ">"
	return $p_tag
}

### UTILITY: PRINT END TAG OF PARAGRAPH BLOCK ###
proc p_style_end {} {
	return "</p>"
}

### FILTER TEXTUAL OUTPUT ###
proc out_html {string} {
	global references

	set string " $string "
	
	# italic style #
	while {[regexp {([ \(])_(.+?)_([ \)\.,!?])} $string dummy head_char emph_text tail_char]} {
		regsub -all {_} $emph_text " " emph_text
		regsub {([ \(])_(.+?)_([ \)\.,!?])} $string "$head_char<i>$emph_text</i>$tail_char" string
	}

	# bold style #
	while {[regexp {([ \(])\*(.+?)\*([ \)\.,!?])} $string dummy head_char bf_text tail_char]} {
		regsub -all {\*} $bf_text " " bf_text
		regsub {([ \(])\*(.+?)\*([ \)\.,!?])} $string "$head_char<b>$bf_text</b>$tail_char" string
	}
	
	# monospace style #
	while {[regexp {([ \(])\'(.+?)\'([ \)\.,!?])} $string dummy head_char code_text tail_char]} {
		regsub {([ \(])\'(.+?)\'([ \)\.,!?])} $string "$head_char<code>$code_text</code>$tail_char" string
	}
	
	# FIXME: kick out monospace style via hashes #
	while {[regexp {\#([^#]+)\#} $string dummy code_text]} {
		regsub -all {\#} $code_text " " code_text
		regsub {\#([^#]+)\#} $string " <code>$code_text</code> " string
		puts stderr "Warning: Monospace using #hashes# is deprecated because it looks ugly."
		puts stderr "         Please use 'apostrophes' instead. Thanks, your GOSH maintainer."
	}
	
	# hexadecimal numbers #
	regsub -all {0x(([a-fA-F0-9]+)[\+\-\*\/]?(0x)?)+} $string "<code>&</code>" string
	
	set linktext ""
	# insert references and citations #
	while {[regexp {\[([^\]]+)\]} $string dummy ref_text]} {
		if {[info exists references($ref_text,type)]} {
			if {$references($ref_text,type) == "tabcap"} {
				regsub {\[([^\]]+)\]} $string "<a href=\"#[label_html $ref_text]\">$references($ref_text,index)</a>" string
			} else {
				regsub {\[([^\]]+)\]} $string "<a href=\"#[label_html $ref_text]\">$ref_text</a>" string
			}
		} else {
			set url ""
			set linktext ""
			set tooltip ""
			regexp {^(\w+:[^ ]+)} $ref_text url
			regexp {^(\w+:[^ ]+) - ([^\(]+)} $ref_text dummy dummy linktext
			regexp {\((.*)\)} $ref_text dummy tooltip
			if {$url == ""} {
				set url $ref_text
			}
			if {$linktext == ""} {
				set linktext $url
			}
			set tooltiptext " title=\"$tooltip\""
			if {$tooltip == ""} {
				set tooltiptext ""
			}
			regsub { +$} $linktext "" linktext
			regsub -all {&} $url "_§%and%§_" url
			regsub {\[([^\]]+)\]} $string "<a href=\"$url\" alt=\"$linktext\"$tooltiptext>$linktext</a>" string
		}
	}
	regsub -all {_§%and%§_} $string {\&} string

	# clear spaces at the end of a line #
	regsub { +$} $string "" string
	regsub {^ } $string "" string
	
	return $string
}

### FILTER LABEL ###
proc label_html {string} {
	regsub -all {"} $string "" string
	return $string
}

### WRITE HEADER OF TEX FILE ###
proc produce_head_html {} {
	global title authors references toc_refs config_html_toc
	printline "<html><head><title>$title</title></head>"
	printline "<body>"
	if {$title != ""} {
		printline "<h1><center>$title</center></h1>"
	}
	if {$authors != ""} {
		printline "<b><center>$authors</center></b>"
	}
	printline "<center>[exec date --iso-8601]</center>"
	
	# table of contents #
	if {$config_html_toc} {
		printline "<hr/>"
		printline "<table align=\"center\" cellpadding=\"5\"><tr><td>"
		printline "<h3>Table of contents</h3>"
		foreach ref_name $toc_refs {
			if {$references($ref_name,type) == "chapter"} {
				printline "<b><a href=\"#[label_html $ref_name]\">$references($ref_name,index). $ref_name</a></b><br/>"
			}
			if {$references($ref_name,type) == "section"} {
				printline "<code>&nbsp;&nbsp;</code><a href=\"#[label_html $ref_name]\">$references($ref_name,index). $ref_name</a><br/>"
			}
			if {$references($ref_name,type) == "subsection"} {
				printline "<code>&nbsp;&nbsp;&nbsp;&nbsp;</code><a href=\"#[label_html $ref_name]\">$references($ref_name,index). $ref_name</a><br/>"
			}
		}
		printline "</td></tr></table>"
	}
	printline "<hr/><br/>"
}

### WRITE TAIL OF TEX FILE ###
proc produce_tail_html {} {
	global authors
	printline "<hr/><br/>"
	printline "<i>$authors</i>"
	printline "</body>"
	printline "</html>"
}

### VERBATIM  ###
proc process_verbatim_html {txtblock} {
	while {[lindex $txtblock end] == ""} {
		set txtblock [lrange $txtblock 0 [expr [llength $txtblock]-2]]
	}
	puts "<pre>"
	foreach txtline $txtblock {
		regsub {^\!} $txtline "" txtline
		regsub -all {\t} $txtline "  " txtline
		puts "$txtline"
	}
	puts "</pre>"
}

### ITEMIZE ###
proc process_itemize_html {txtblock} {
	printline "<ul>"
	handle_txtblock itemize $txtblock
	printline "</ul>"
}

### ITEM ###
proc process_item_html {itemtxtblock} {
	printline "<li>"
	set txtline [lindex $itemtxtblock 0]
	regsub {^\*\ } $txtline "" txtline
	regsub {^\#\ } $txtline "" txtline
	lappend txtblock $txtline
	foreach txtline [lrange $itemtxtblock 1 end] {
		regsub {^\ \ } $txtline "" txtline
		lappend txtblock $txtline
	}
	handle_txtblock item $txtblock
	printline "</li>"
}

### DESCRIPTION ###
proc process_description_html {txtblock} {
	printline "<dl>"
	handle_txtblock description $txtblock
	printline "</dl>"
#	printline "<br/>"
}

### DESCRIPTION ITEM ###
proc process_descitem_html {itemtxtblock} {
	set txtline [lindex $itemtxtblock 0]
	set desc_name ""
	regexp {^\:(.+)\:} $txtline dummy desc_name
	regsub {^\:(.+)\: *} $txtline "" txtline
	printline "<dt>[out_html $desc_name]</dt>"
	printline "<dd>"
	lappend txtblock $txtline
	foreach txtline [lrange $itemtxtblock 1 end] {
		regsub {^\ \ } $txtline "" txtline
		lappend txtblock $txtline
	}
	handle_txtblock descitem $txtblock
	printline "</dd>"
}

### ENUMERATION ###
proc process_enumeration_html {txtblock} {
	printline "<ol>"
	handle_txtblock enumeration $txtblock
	printline "</ol>"
}

### ENUM ITEM ###
proc process_enum_html {itemtxtblock} {
	process_item_html $itemtxtblock
}


### PLAIN ###
proc process_plain_html {plaintxtblock} {
	global depth
	printline "[p_style_begin][font_style_begin]"
	incr depth
	foreach txtline $plaintxtblock {
		printline "[out_html $txtline]"
	}
	incr depth -1
	printline "[font_style_end][p_style_end]"
}

### ABSTRACT ###
proc process_abstract_html {txtblock} {
	set title [lindex $txtblock 0]
	printline "<h1>Abstract</h1>"
	printline "<i>"
	handle_txtblock abstract [lrange $txtblock 2 end]
	printline "</i><hr/><br/>"
}

### CHAPTER ###
proc process_chapter_html {txtblock} {
	global references curr_chapter curr_section_type config_html_sec_enum
	set curr_section_type chapter
	set title [lindex $txtblock 0]
	set curr_chapter $references($title,index)
	set sec_prefix ""
	if {$config_html_sec_enum} { set sec_prefix "$curr_chapter " }
	printline "<a name=\"[label_html $title]\"></a>"
	printline "<h1>[font_style_begin]$sec_prefix[out_html $title][font_style_end]</h1>"
	handle_txtblock chapter [lrange $txtblock 2 end]
}

### SECTION ###
proc process_section_html {txtblock} {
	global references curr_chapter curr_section curr_section_type text_color config_html_sec_enum
	set curr_section_type section
	set title [lindex $txtblock 0]
	set curr_section $references($title,index)
	set sec_prefix ""
	if {$config_html_sec_enum} { set sec_prefix "$curr_chapter.$curr_section " }
	printline "<a name=\"[label_html $title]\"></a>"
	printline "<h2>[font_style_begin]$sec_prefix[out_html $title][font_style_end]</h2>"
	handle_txtblock section [lrange $txtblock 2 end]
}

### SUBSECTION ###
proc process_subsection_html {txtblock} {
	global references curr_chapter curr_section curr_subsection curr_section_type text_color config_html_sec_enum
	set curr_section_type subsection
	set title [lindex $txtblock 0]
	set curr_subsection $references($title,index)
	set sec_prefix ""
	if {$config_html_sec_enum} { set sec_prefix "$curr_chapter.$curr_section.$curr_subsection " }
	printline "<a name=\"[label_html $title]\"></a>"
	printline "<h3>[font_style_begin]$sec_prefix[out_html $title][font_style_end]</h3>"
	handle_txtblock subsection [lrange $txtblock 2 end]
}

### PARAGRAPH ###
proc process_paragraph_html {txtblock} {
	global curr_section_type text_color
	set curr_section_type paragraph
	set title [lindex $txtblock 0]
	printline "<a name=\"[label_html $title]\"></a>"
	printline "<h4>[font_style_begin][out_html $title][font_style_end]</h4>"
	handle_txtblock paragraph [lrange $txtblock 2 end]
}

### IMAGE ###
proc process_image_html {txtblock} {
	set img_info ""
	set img_size 80
	set img_angle "0"
	regexp {\[(image \w+.*)\]} [lindex $txtblock 0] dummy img_info
	if {$img_info == ""} return
	set img_name [lindex $img_info 1]
	regexp { (\d+)%} $img_info dummy img_size
	regexp { (\d+)°} $img_info dummy img_angle
	
	set img_cap ""
	foreach img_capline $txtblock {
		regsub {^\[.*\]} $img_capline "" img_capline
		regsub {^ *} $img_capline "" img_capline
		append img_cap $img_capline " "
	}
	regsub { *$} $img_cap "" img_cap
	
	printline "<table cellspacing=\"10\"><tr><td>"
	printline "  <img src=\"$img_name.jpg\" border=\"0\">"
	if {$img_cap != ""} {
		printline "</td><td valign=\"center\">"
		printline "  <font size=\"-1\">$img_cap</font>"
	}
	printline "</td></tr></table>"
}


### TABLE ###
proc output_table_html {head rows caption} {
	global references
	set cap ""
	foreach capline $caption {
		regsub  {^ +} $capline " "  capline
		append cap $capline
	}
	if {[regexp {^\[table (.+)\](.*)$} $cap dummy caplab captxt]} {
		printline "<a name=\"[label_html \"$caplab\"]\"></a>"
	}
	printline "<br/><center><table cellspacing=\"0\" cellpadding=\"3\" border=\"1\">"
	
	print "[indent]<tr>"
	foreach headcell [lrange $head 0 end] {
		print "[indent]<th bgcolor=#f0f7ff>[lindex $headcell 1]<br/></th>"
	}
	printline "</tr>"
	
	foreach row $rows {
		if {[lindex $row 0] == "text"} {
			printline "<tr>"
			set cells [lindex $row 1]
			foreach cell [lrange $cells 0 end] {
				printline "<td>[out_html $cell]</td>"
			}
			printline "</tr>"
		}
	}
	printline "</table>"

	if {[regexp {^\[table (.+)\](.*)$} $cap dummy caplab captxt]} {
		regsub  {^ +} $captxt ""  captxt
		printline "Table $references($caplab,index): [out_html $captxt]"
	}
	printline "</center><br/>"
}

set text_color(default)    "#000000"
set text_color(chapter)    "#000014"
set text_color(section)    "#202040"
set text_color(subsection) "#404060"
set text_color(paragraph)  "#505090"
set curr_section_type default
set outmode html

#
# Process command line arguments
#
set config_html_toc       [regexp {\--html-toc}       $argv dummy]
set config_html_p_justify [regexp {\--html-p-justify} $argv dummy]
set config_html_p_colored [regexp {\--html-p-colored} $argv dummy]
set config_html_sec_enum  [regexp {\--html-sec-enum}  $argv dummy]
