
################
#              #
# HTML BACKEND #
#              #
################


### FILTER TEXTUAL OUTPUT ###
proc out_html {string} {
	global references

	set string " $string "
	
	# italic style #
	while {[regexp {([ \(])_(.+?)_([ \)\.,!?])} $string dummy head_char emph_text tail_char]} {
		regsub -all {_} $emph_text " " emph_text
		regsub {([ \(])_(.+?)_([ \)\.,!?])} $string "$head_char<i>$emph_text</i>$tail_char" string
	}

	# bold style #
	while {[regexp {([ \(])\*(.+?)\*([ \)\.,!?])} $string dummy head_char bf_text tail_char]} {
		regsub -all {\*} $bf_text " " bf_text
		regsub {([ \(])\*(.+?)\*([ \)\.,!?])} $string "$head_char<b>$bf_text</b>$tail_char" string
	}
	
	# monospace style #
	while {[regexp {([ \(])\'(.+?)\'([ \)\.,!?])} $string dummy head_char code_text tail_char]} {
		regsub {([ \(])\'(.+?)\'([ \)\.,!?])} $string "$head_char<code>$code_text</code>$tail_char" string
	}
	
	# FIXME: kick out monospace style via hashes #
	while {[regexp {\#([^#]+)\#} $string dummy code_text]} {
		regsub -all {\#} $code_text " " code_text
		regsub {\#([^#]+)\#} $string " <code>$code_text</code> " string
		puts stderr "Warning: Monospace using #hashes# is deprecated because it looks ugly."
		puts stderr "         Please use 'apostrophes' instead. Thanks, your GOSH maintainer."
	}
	
	# hexadecimal numbers #
	regsub -all {0x(([a-fA-F0-9]+)[\+\-\*\/]?(0x)?)+} $string "<code>&</code>" string
	
	# insert references and citations #
	while {[regexp {\[([^\]]+)\]} $string dummy ref_text]} {
		if {[info exists references($ref_text,type)]} {
			if {$references($ref_text,type) == "tabcap"} {
				regsub {\[([^\]]+)\]} $string "<a href=\"#[label_html $ref_text]\">$references($ref_text,index)</a>" string
			} else {
				regsub {\[([^\]]+)\]} $string "<a href=\"#[label_html $ref_text]\">$ref_text</a>" string
			}
		} else {
			regsub {\[([^\]]+)\]} $string "<a href=\"$ref_text\">$ref_text</a>" string
		}
	}
	
	return $string
}

### FILTER LABEL ###
proc label_html {string} {
	regsub -all {"} $string "" string
	return $string
}

### WRITE HEADER OF TEX FILE ###
proc produce_head_html {} {
	global title authors references toc_refs
	puts "<html><head><title>$title</title></head>"
	puts "<body>"
	if {$title != ""} {
		puts "<h1><center>$title</center></h1>"
	}
	if {$authors != ""} {
		puts "<b><center>$authors</center></b>"
	}
	puts "<center>[exec date --iso-8601]</center>"
	puts "[indent]<hr/>"
	
	# table of contents #
	puts "[indent]<table align=\"center\" cellpadding=\"5\"><tr><td>"
	puts "<h3>Table of contents</h3>"
	foreach ref_name $toc_refs {
		if {$references($ref_name,type) == "chapter"} {
			puts "[indent]<b><a href=\"#[label_html $ref_name]\">$references($ref_name,index). $ref_name</a></b><br/>"
		}
		if {$references($ref_name,type) == "section"} {
			puts "[indent]<code>&nbsp;&nbsp;</code><a href=\"#[label_html $ref_name]\">$references($ref_name,index). $ref_name</a><br/>"
		}
		if {$references($ref_name,type) == "subsection"} {
			puts "[indent]<code>&nbsp;&nbsp;&nbsp;&nbsp;</code><a href=\"#[label_html $ref_name]\">$references($ref_name,index). $ref_name</a><br/>"
		}
	}
	puts "[indent]</td></tr></table>"
	puts "[indent]<hr/><br/>"
}

### WRITE TAIL OF TEX FILE ###
proc produce_tail_html {} {
	global authors
	puts "<hr/><br/>"
	puts "<i>$authors</i>"
	puts "</body>"
	puts "</html>"
}

### VERBATIM  ###
proc process_verbatim_html {txtblock} {
	while {[lindex $txtblock end] == ""} {
		set txtblock [lrange $txtblock 0 [expr [llength $txtblock]-2]]
	}
	puts "[indent]<pre>"
	foreach txtline $txtblock {
		regsub {^\!} $txtline "" txtline
		regsub -all {\t} $txtline "  " txtline
		puts "$txtline"
	}
	puts "[indent]</pre>"
}

### ITEMIZE ###
proc process_itemize_html {txtblock} {
#	puts "[indent]\\begin{itemize}"
	puts "[indent]<ul>"
	handle_txtblock itemize $txtblock
	puts "[indent]</ul>"
#	puts "[indent]\\end{itemize}"
}

### ITEM ###
proc process_item_html {itemtxtblock} {
	puts "[indent]<li>"
	set txtline [lindex $itemtxtblock 0]
	regsub {^\*\ } $txtline "" txtline
	regsub {^\#\ } $txtline "" txtline
	lappend txtblock $txtline
	foreach txtline [lrange $itemtxtblock 1 end] {
		regsub {^\ \ } $txtline "" txtline
		lappend txtblock $txtline
	}
	handle_txtblock item $txtblock
	puts "[indent]</li>"
}

### DESCRIPTION ###
proc process_description_html {txtblock} {
	handle_txtblock description $txtblock
	puts "[indent]<br/>"
}

### DESCRIPTION ITEM ###
proc process_descitem_html {itemtxtblock} {
	set txtline [lindex $itemtxtblock 0]
	set desc_name ""
	regexp {^\:(.+)\:} $txtline dummy desc_name
	regsub {^\:(.+)\: *} $txtline "" txtline
	puts "[indent]<b><i>[out_html $desc_name]</i></b>"
	lappend txtblock $txtline
	foreach txtline [lrange $itemtxtblock 1 end] {
		regsub {^\ \ } $txtline "" txtline
		lappend txtblock $txtline
	}
	handle_txtblock descitem $txtblock
}

### ENUMERATION ###
proc process_enumeration_html {txtblock} {
	puts "[indent]<ol>"
	handle_txtblock enumeration $txtblock
	puts "[indent]</ol>"
}

### ENUM ITEM ###
proc process_enum_html {itemtxtblock} {
	process_item_html $itemtxtblock
}

### PLAIN ###
proc process_plain_html {plaintxtblock} {
	global curr_section_type text_color
	puts "[indent]<font color=\"$text_color($curr_section_type)\">"
	#puts "<p align=\"justify\">"
	while {[lindex $plaintxtblock end] == ""} {
		set plaintxtblock [lrange $plaintxtblock 0 [expr [llength $plaintxtblock]-2]]
	}
	foreach txtline $plaintxtblock {
		if {$txtline != ""} {
			puts -nonewline [indent]
		} else {
			puts "[indent]<p></p>"
		}
		puts [out_html $txtline]
	}
	#puts "</p>"
	puts "[indent]<p></p>"
	puts "[indent]</font>"
}

### ABSTRACT ###
proc process_abstract_html {txtblock} {
	set title [lindex $txtblock 0]
	puts "\n[indent]%     -+*|\[ [string toupper $title] \]|*+-\n"
	puts "[indent]<h1>Abstract</h1>"
	puts "[indent]<i>"
	handle_txtblock abstract [lrange $txtblock 2 end]
	puts "[indent]</i><hr/><br/>"
}

### CHAPTER ###
proc process_chapter_html {txtblock} {
	global references curr_chapter curr_section_type text_color sec_enum
	set curr_section_type chapter
	set title [lindex $txtblock 0]
	set curr_chapter $references($title,index)
	set sec_prefix ""
	if {$sec_enum} { set sec_prefix "$curr_chapter " }
	puts "\n[indent]<a name=\"[label_html $title]\"></a>"
	puts "\n[indent]<h1><font color=\"$text_color(chapter)\">$sec_prefix[out_html $title]</font></h1>"
	handle_txtblock chapter [lrange $txtblock 2 end]
}

### SECTION ###
proc process_section_html {txtblock} {
	global references curr_chapter curr_section curr_section_type text_color sec_enum
	set curr_section_type section
	set title [lindex $txtblock 0]
	set curr_section $references($title,index)
	set sec_prefix ""
	if {$sec_enum} { set sec_prefix "$curr_chapter.$curr_section " }
	puts "\n[indent]<a name=\"[label_html $title]\"></a>"
	puts "[indent]<h2><font color=\"$text_color(section)\">$sec_prefix[out_html $title]</font></h2>"
	handle_txtblock section [lrange $txtblock 2 end]
}

### SUBSECTION ###
proc process_subsection_html {txtblock} {
	global references curr_chapter curr_section curr_subsection curr_section_type text_color sec_enum
	set curr_section_type subsection
	set title [lindex $txtblock 0]
	set curr_subsection $references($title,index)
	set sec_prefix ""
	if {$sec_enum} { set sec_prefix "$curr_chapter.$curr_section.$curr_subsection " }
	puts "\n[indent]<a name=\"[label_html $title]\"></a>"
	puts "[indent]<h3><font color=\"$text_color(subsection)\">$sec_prefix[out_html $title]</font></h3>"
	handle_txtblock subsection [lrange $txtblock 2 end]
}

### PARAGRAPH ###
proc process_paragraph_html {txtblock} {
	global curr_section_type text_color
	set curr_section_type paragraph
	set title [lindex $txtblock 0]
	puts "\n[indent]<a name=\"[label_html $title]\"></a>"
	puts "[indent]<h4><font color=\"$text_color(paragraph)\">[out_html $title]</font></h4>"
	handle_txtblock paragraph [lrange $txtblock 2 end]
}

### IMAGE ###
proc process_image_html {txtblock} {
	set img_info ""
	set img_size 80
	set img_angle "0"
	regexp {\[(image \w+.*)\]} [lindex $txtblock 0] dummy img_info
	if {$img_info == ""} return
	set img_name [lindex $img_info 1]
	regexp { (\d+)%} $img_info dummy img_size
	regexp { (\d+)°} $img_info dummy img_angle
	
	set img_cap ""
	foreach img_capline $txtblock {
		regsub {^\[.*\]} $img_capline "" img_capline
		regsub {^ *} $img_capline "" img_capline
		append img_cap $img_capline " "
	}
	regsub { *$} $img_cap "" img_cap
	
	puts "[indent]<table cellspacing=\"10\"><tr><td>"
	puts "[indent]  <img src=\"$img_name.jpg\" border=\"0\">"
	if {$img_cap != ""} {
		puts "[indent]</td><td valign=\"center\">"
		puts "[indent]  <font size=\"-1\">$img_cap</font>"
	}
	puts "[indent]</td></tr></table>"
}


### TABLE ###
proc output_table_html {head rows caption} {
	global references
	set cap ""
	foreach capline $caption {
		regsub  {^ +} $capline " "  capline
		append cap $capline
	}
	if {[regexp {^\[table (.+)\](.*)$} $cap dummy caplab captxt]} {
		puts "[indent]<a name=\"[label_html \"$caplab\"]\"></a>"
	}
	puts "[indent]<br/><center><table cellspacing=\"0\" cellpadding=\"3\" border=\"1\">"
	
	puts -nonewline "[indent]<tr>"
	foreach headcell [lrange $head 0 end] {
		puts -nonewline "[indent]<th bgcolor=#f0f7ff>[lindex $headcell 1]<br/></th>"
	}
	puts "[indent]</tr>"
	
	foreach row $rows {
		if {[lindex $row 0] == "text"} {
			puts "<tr>"
			set cells [lindex $row 1]
			foreach cell [lrange $cells 0 end] {
				puts -nonewline "[indent]<td>[out_html $cell]</td>"
			}
			puts "</tr>"
		}
	}
	puts "[indent]</table>"

	if {[regexp {^\[table (.+)\](.*)$} $cap dummy caplab captxt]} {
		regsub  {^ +} $captxt ""  captxt
		puts "[indent]Table $references($caplab,index): [out_html $captxt]"
	}
	puts "</center><br/>"
}

set text_color(default)    "#000000"
set text_color(chapter)    "#000014"
set text_color(section)    "#202040"
set text_color(subsection) "#404060"
set text_color(paragraph)  "#505090"
set sec_enum 1
set curr_section_type default
set outmode html
